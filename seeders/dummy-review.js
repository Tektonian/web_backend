"use strict";

const EvalDummyTextx = [
    "판단이 명확하고 현명한",
    "뒷받침되는 데이터를 통해 직관적으로 판단합니다",
    "불명확한 혹은 불확실한 상황에서도 현명한 결정을 내립니다",
    "표면적으로 드러난 상황 혹은 이슈 진단에 그치지 않고 근본 원인을 파악합니다",
    "단기보다 장기적인 안목으로 전략적으로 생각하고, 하려는 일과 하지 않고자 하는 일을 명확히 구분합니다",
    "🗣️ 소통이 효과적인",
    "말과 글이 간결하고 명료합니다",
    "전체적인 맥락을 이해하려고 노력한 뒤 반응합니다",
    "동료에게 솔직하며 건설적인 피드백을 적시에 제공합니다",
    "스트레스가 높은 상황에서도 평정을 유지하며 명석하게 사고합니다",
    "🎓 호기심을 갖고 배우는",
    "빠르고, 열정적으로 배웁니다",
    "전문 분야가 아닌 영역에도 실질적인 도움을 줍니다",
    "다양한 관점으로 상황을 바라보며, 타인이 놓친 연관 관계를 찾아냅니다",
    "고객을 이해하기 위해 노력하고, 어떻게 더 나은 서비스(제품) 혹은 경험을 제공할지 고민합니다",
    "🧗 용기 있게 도전하는",
    "조직의 가치에 부합하지 않는 행동에 문제를 제기합니다",
    "진실을 추구하기 위해, 자신에게 미칠 영향을 감수합니다",
    "실패할 가능성이 있어도, 위험을 피하지 않고 용감하고 현명하게 도전합니다",
    "어려운 상황에서도 무엇이 회사의 이익에 가장 부합하는지 본인의 생각을 분명하게 전달합니다",
    "🔥 끈기 있게 열정적인",
    "자신 있더라도 자만하지 않습니다",
    "쉽게 포기하지 않으며 낙관적입니다",
    "고객을 아끼고 조직의 성공을 염원합니다",
    "늘 탁월성을 추구하며 주변 사람들의 귀감이 됩니다",
    "🤝 동료와 협력하는",
    "동료를 돕는데 시간을 아끼지 않습니다",
    "열린 자세로 훌륭한 아이디어를 모색합니다",
    "정보를 투명하게, 널리, 적극적으로 공유합니다",
    "본인이나 소속 팀이 아니라 조직 전체의 이익을 우선시합니다",
    "🚀 문제를 해결하고 혁신하는",
    "참신하고 유용한 아이디어를 제안합니다",
    "어려운 문제에는 개념을 재정립해 해결책을 찾아냅니다",
    "보편적 가설에 이의를 제기하고 더 좋은 접근법을 제시합니다",
    "변화에 잘 적응할 수 있도록 복잡성을 줄이고 단순화해 조직의 민첩성을 유지합니다",
    "🤲 다양함을 포용하는",
    "누군가 소외되는 상황을 좌시하지 않습니다",
    "배경과 문화가 다양한 사람들과 효과적으로 협업합니다",
    "다양한 시각을 장려하고 수용하여 더 좋은 결론을 도출합니다",
    "누구나 편견이 있다는 사실을 받아들이고, 편견을 극복하고자 노력합니다",
    "💎 진실하고 투명한",
    "솔직하고 진실하며 숨김이 없고, 비정치적입니다",
    "직급이나 견해 차이와 관계없이 상대를 존중합니다",
    "동료 직원에 관한 의견은 당사자 앞에서 이야기할 수 있는 것만 말합니다",
    "실수를 기꺼이, 공개적으로 인정하며, 공유하기 다소 꺼려지는 부분이 있더라도 업무와 관련된 정보는 항상 공유합니다",
    "🎯 결과를 만들어내는",
    "중요한 일을 많이 해냅니다",
    "과정보다는 결과를 중시합니다",
    "동료에게 긍정적인 영향을 줍니다",
    "뛰어난 성과를 지속적으로 달성해 동료들의 신뢰를 받습니다",
];
const ReviewDummyTexts = [
    "프랜차이즈 카페: 난 저가형 카페에서 했었는데, 원사이즈에 베이커리 거의 다 냉동이라 ㅂㄹ 안 어려웠음. 여름 러쉬타임에는 좀 헬이긴 함 (특히 스무디/슬러쉬/프라페 종류별로 밀려들어올 땐 좀 눈물남 ㅋㅎ).",
    "근데 투썸이나 이디야처럼 메뉴종류 많고 베이커리에 손대야되는 거 많을수록 난이도가 배로 올라갈 거임. 특히 음료 사이즈 많은 경우엔 그 사이즈별류 레시피가 다르다는 거 명심..",
    "그리고 배달이 너네 생각보다 많이 들어옴 ㅠ 배달이 진짜 빡셈..",
    "개인카페: 사장복이 제일 중요하지만 잘만 걸리면 진짜 최고의 알바. 인테리어랑 유니폼 예쁜데 한가하고 사장님 친절하시다? 그냥 거기서 말뚝박아야함.. 나도 이런 곳에서 한 번 일했는데 너무 좋아서 1년정도 함. 사람들이 생각하는 카페 로망은 이런 곳임 프차가 아니라 ㅋㅌㅋ 근데 사장님이 개또라이인곳도 한 번 갔었는데 여긴 바로 탈주했었음.. 지원하기 전에 몇번 고객으로 가서 분위기 살펴보는 거 추천함.",
    "카페가 대체적으로 제일 재밌음. 일단 음료 만드는 게 재밌고 키오스크 있으면 더 편함. 진상 종종 있긴 한데 서비스업의 숙명이지 뭐..ㅋ 근데 마감파트는 되도록 피해. 진짜 개빡셈. 이건 어느 브랜드건 간에 걍 똑같음 마감이 젤 빡셈 카페는.. 미들 > 오픈 > 마감 순으로 개꿀임. 마감은 진ㅉ.. 걍 웬만하면하지마라 ㅎ",
    "영화관: 영화관도 해보고 싶은 애들 많을 거 같은데 난 코시국에 단기로 했어서 그 영화관 특유의 막 친목하고 그런 거 많이 못 겪긴 함 ㅠ 그래도 확실히 같이 일하는 사람들이 외모가 다들 준수한 편임(남자들도 좀 멀끔한 사람이 많음). 일도 익숙해지면 꽤 재밌고 영화관은 혜택이 좋음ㅇㅇ 근데 외울 거 많고 못 앉아있는다는 거랑 마블 영화 개봉하면 좀 죽을 것 같다는 단점.. 그리고 진상이 진~~~||~~~~~~짜 개많음…….",
    "과외: 젤 편하게 돈 많이 벌기는 하는데 마음이 안 편함.. 난 내가 맡은 학생이 나땜에 성적 개망할까봐 너무 무서워서 과외는 한 번만 하고 그 다음부터 안 하규 있음 근데 재밌고 뿌듯하긴 함!",
    "학원조교: 이건 내가 갔던 학원이 개또라이같아서 세달정도 하고 관뒀는데 학원 잘 찾아보고 가… 업무 개많은데 돈 최저에서 쪼금 더 주는 곳도 있음 이럴바엔 과외가 낫지",
    "빙수알바: 걍하지마라… 겨울에했는제도뒤질거같았다",
    "1. 남의 돈 벌어먹기는 존나 힘들다. > 돈내면서 다니는 학교도 좆같은데 돈 벌면서 다니는 일터는 얼마나 좆같겠는가",
    "2. 근데 그 일자리 구하기도 존나 힘들다. > 심지어 코로나 시국인 요즘엔 훨씬 더",
    "3. 좋은 사장도 많지만 좆같은 사장도 많다. > 경험상 열에 넷은 무난하고 하나는 천사고 남은 다섯은 씨발새끼였다.",
    "1. 알바몬과 알바천국을 자주 눈팅해라 > 주로 알바몬이 더 많이 ,자주 올라온다.",
    "2. 알바는 집에서 가까운곳이 와따다. > 최대 왕복 1시간이다. 기왕이면 집앞이 최고.",
    "3. 공고가 자주 올라오는곳은 걸러라 > 생각을 해보자. 왜 공고가 자주 올라올까? 그만큼 쉽게 구하고 쉽게 짜르거나 못버티고 추노해서 또 사람을 구하는것이다",
    "4. 고기집은 존나 힘들다. > 하지마라",
    "5. 고기집은 매우 힘들다. > 하지마라.",
    "6. 고기집은 개씨발 힘들다. > 복붙실수 아니다 하지마라",
    "7. 그렇다고 다른 알바가 안힘든건 아니다. > 나름대로 다 힘들다.",
    "8. 지원한 곳이 어딘지 모르는곳이라면 로드뷰로 가게 위치와 크기를 봐라 > 평수가 크다는것은 그만큼 니가 존나 돌아다녀야 한다는 소리다.",
    "9. 지하철 출구 코앞에 있는 매장에서 꿀빨생각은 버려라 > 존나 바쁘다.",
    "10. 스타벅스에서 꿀빨 생각도 버려라. > 생각해봐라 니가 살면서 간 스벅중에서 한가한 매장이 있었나? 유니폼이랑 스벅 네임드에 속아서 헬무지에 들어가지 말자",
    "11. 카페알바는 생각보다 힘들다. > 그렇지만 재밌을수도 있다.",
    "12. 유니폼이 예쁘면 일할때 힘이 난다. > 유니폼이 좆구리면 내가 이딴걸 입어야 한다는 생각에 기분이 다운된다.",
    "13. 프렌차이즈 알바를 하면서 꿀빨생각은 버리는게 좋다. > 대기업 지점이 알바가 꿀빨정도로 매출이 안나오면 폐점하거나 애초에 그 지점에 오픈을 안한다.",
    "14. 강남이나 홍대같은 번화가에서 알바하면서 꿀빨생각도 버리는게 좋다. > 그 동네에 유동인구 적은거 봤냐",
    "15. 술집알바는 개씨발 존나 힘들다. > 기본적으로 밤낮이 바뀌고 일도 힘들고 정신적으로도 힘들다.",
    "16. 주6일은 하는거 아니다. > 돈벌려고 일하는거지 일하려고 돈버는거 아니다.",
    "17. 밤낮바뀌는 일은 안하는게 좋다. > 사람 망가진다.",
    "18. 대기업 프렌차이즈는 평균적으로 힘들다. > 걔넨 매출 안나올정도로 사람 없는곳에 지점 안낸다. 그대신 월급 안밀리고 주휴 다 챙겨준다.",
    "19. 개인사업장이 비교적 편하다. > 사장이 갑이라서 좋은 사장 만나면 정말 놀면서 돈 번다. 그대신 월급이 밀리거나 주휴가 안나올수도 있다.",
    "20. 지원할 매장이 동네라면 손님신분으로 한번쯤 가보는게 좋다. > 가서 분위기를 봐라. 사장이 천사인지 개씨발놈인지, 사람은 많이 오는지 업무 강도는 빡센지 직원들은 다들 친하게 지내는지, 가게 분위기는 전체적으로 화목한지 빡빡한지",
    "21. 편의점의 경우 카운터에 의자가 있는지 꼭 볼것 > 직영점은 못앉는게 원칙이나 가맹점은 그딴거 없다. 카운터에 의자도 없으면 점장이 개씨발 존나 집게사장같은 악독한 수전노 새끼니 무조건 거를것",
    "22. 경험상 아파트촌이나 사람 사는곳에 진상도 많고 손님도 많다. > 소위 말하는 동네장사는 어쩔수 없이 오는새끼만 오기때문에 단골을 빙자한 씹새끼들이 많다.",
    "23. 빌딩숲은 바짝 바쁘고 나머지는 한가하다. > 직장인 점심시간인 11시부터 2시까지 러쉬치고 그다음부터는 한가할 확률이 매우 높다.",
    "1. 여기저기 막 찔러봐라 > 이시국에 하나만 찌른다고 될 확률 0이다. 막 찔러봐라",
    "2. 떨어져도 낙심하지 말것 > 어차피 알바다.",
    "3. 붙으면 개이득이니 최대한 오래 벌어먹을것 > 일터가 개좆같거나, 뚜렷한 목표가 있어서 그 공부를 해야하는게 아니라면 기왕 붙은거 최대한 오래 버티면서 돈이라도 벌어라",
    "4. 면접볼때 사장 태도를 잘 봐야한다 > 처음부터 뭔가 느낌 쎄하면 그 느낌이 맞을 확률이 높다.",
    "5. 면접볼때 사장이 초반에 반말을 깐다면 걸러야한다 > 씨발놈이다.",
    "6. 대놓고 가끔 주휴 안준다고 하는 씹새끼들이 있다. > 개새끼다.",
    "7. 주휴 안준다고 말하는 이유는? > 알바가 얼마나 노예근성이 있는지 보기 위해서이다.",
    "8. 주휴 안주면 안되지않냐? > 안주는거로 합의해도 고용노동청은 그걸 합의해주지 않았다. 그만두면서 노동청에 찌르면 다 토해내야한다.",
    "9. 기본적으로 우리는 이거저거 안준다 안챙겨준다 하는곳은 하늘이 점지해준곳이니 걸러라 > 돈에 혹해서 가면 헬을 경험한다.",
    "10. 반대로 사람좋은척 하면서 빨대꽂는 새끼도 있다. > 무묭씨 믿으니까 ㅁㅁ 해줘! 하면서 은근히 믿는척, 널 좋아하는 척, 하면서 개수작을 부리는 경우.",
    "11. 면접은 최대한 웃는상이 좋다. > 잘 웃으면 반은 먹고 간다.",
    "12. 말바꾸면 무조건 걸러라 > 공고 내용과 전혀 다른 말을 하는 새끼들은 정직하게 말하면 다 안오니까 구라친거다.",
    "1. 축하한다 > 앞으로 존나 좆같은 일이 많을거다",
    "2. 근로계약서는 무적권 써라 > 두번써라",
    "3. 안썼으면? > 노동부 ㄱ",
    "1. 초반엔 실수해도 된다. > 일주일정도는 수습이다",
    "2. 사수가 씨발새끼에요. > 그만둬라",
    "3. 최대한 잘 웃어라 > 표정썩으면 너도 안좋고 사장도 안좋고 손님도 안좋다",
    "4. 내 가게라고 생각하고 일해 > 지랄노",
    "5. 알바는 알바다. > 엄청난 책임감을 가지고 일 할 필요 없다. 한만큼 받는게 아니라 받은만큼 일하면 된다",
    "6. 존나 바빠요 > 그래서 내가 말하지않았냐 그런곳 피하라고",
    "7. 너무 열심히 할 필요는 없다. > 그렇다고 대놓고 꿀빨려는 시도가 보이면 가차없이 짤린다.",
    "8. 노는건 요령껏 > 대놓고 하면 좆됨",
    "9. 정 놀고싶다면 한가할때 사장이랑 놀아라 > 어차피 같이 노는거라 뭐라 못한다",
    "10. 사장은 몰라도 직원이랑은 친하게 지낼 필요가 있다. > 서로 좆같은 일 하는데 자기 편이 하나라도 있어야 편해진다.",
    "11. 진상은 어딜가나 있다. > 진상이 없는곳은 없다.",
    "12. 같이 돈받고 하는 부장새끼도 좆같은데 > 돈내고 오는 저 새끼는 얼마나 좆같겠는가",
    "13. 그렇다고 진상한테 다 져줄 필요는 없다. > 할말있음 해라",
    "14. 그러다 짤려도 내책임은 아니다 > ㅎㅎ..",
    "15. 편의점 진상은 상상을 초월한다. > 편의점 알바 표장이 다 죽상인건 이유가 있다.",
    "16. 하기 싫으면 때려 쳐도 된다. > 스트레스 받으면서까지 할 필욘 없다.",
    "17. 부당한 대우 받은거 아니면 굳이 깽판치고 나올 필요는 없다. > 굳이 적을 만들 필요는 없다. 원덬의 경우 5년전에 처음 구한 알바자리 사장님이랑 지금도 연락하면서 가끔 일자리 필요할때 알바 대타 나가면서 용돈벌이 함",
    "1. 밀린 월급은 다 받아라 > 못받으면 호구다",
    "2. 때려친 순간 사장과 나는 남이다 > 걔 편의 봐줄 필요 없다. 걔도 내 편의 안봐줬다.",
    "3. 고용노동부는 알바편이다. > 떼인 월급 120% 받아준다.",
    "4. 짤렸다고 낙심 안해도 된다. > 원래 알바가 쉽게 구해지고 쉽게 짤리는 자리다. 니잘못아니다",
    "5. 고생했다. > 앞으로 더 잘될거다",
];

/** @type {import('sequelize-cli').Migration} */
module.exports = {
    async up(queryInterface, Sequelize) {
        const db = require("../models");

        const Op = db.Sequelize.Op;
        const CorporationReview = db.sequelize.models.CorporationReview;
        const StudentReview = db.sequelize.models.StudentReview;
        const Consumer = db.sequelize.models.Consumer;
        const Request = db.sequelize.models.Request;
        const Student = db.sequelize.models.Student;

        const allStudentData = await Student.findAll();

        // failed requests: Outdated or Failed status
        const failedRequests = await Request.findAll({
            where: {
                [Op.or]: [{ request_status: 2 }, { request_status: 5 }],
            },
        });

        const unCompletedRequests = await Request.findAll({
            where: {
                [Op.or]: [{ request_status: 0 }, { request_status: 1 }],
            },
        });

        const contractedRequests = await Request.findAll({
            where: {
                [Op.or]: [{ request_status: 3 }],
            },
        });

        const completedRequests = await Request.findAll({
            where: {
                [Op.or]: [{ request_status: 4 }],
            },
        });

        await Promise.all(
            completedRequests.map(async (req) => {
                const randStudent =
                    allStudentData[
                        Math.floor(Math.random() * allStudentData.length)
                    ];

                req.update({ student_ids: [randStudent.student_id] });

                const studentReview = {
                    corp_id: req.corp_id,
                    orgn_id: req.orgn_id,
                    consumer_id: req.consumer_id,
                    student_id: randStudent.student_id,
                    request_id: req.request_id,
                    request_url: "",
                    was_late: Math.floor(Math.random() * 5),
                    was_proactive: Math.floor(Math.random() * 5),
                    was_diligent: Math.floor(Math.random() * 5),
                    commu_ability: Math.floor(Math.random() * 5),
                    lang_fluent: Math.floor(Math.random() * 5),
                    goal_fulfillment: Math.floor(Math.random() * 5),
                    want_cowork: Math.floor(Math.random() * 5),
                    praise: EvalDummyTextx[
                        Math.floor(Math.random() * EvalDummyTextx.length)
                    ],
                    need_improve:
                        EvalDummyTextx[
                            Math.floor(Math.random() * EvalDummyTextx.length)
                        ],
                };

                await StudentReview.bulkCreate([studentReview]);

                const corpReview = {
                    corp_id: req.corp_id,
                    consumer_id: req.consumer_id,
                    student_id: randStudent.student_id,
                    request_id: req.request_id,
                    request_url: "",
                    review_text:
                        ReviewDummyTexts[
                            Math.floor(Math.random() * ReviewDummyTexts.length)
                        ],
                    prep_requirement:
                        EvalDummyTextx[
                            Math.floor(Math.random() * EvalDummyTextx.length)
                        ],
                    sense_of_achive: Math.floor(Math.random() * 5),
                    work_atmosphere: Math.floor(Math.random() * 5),
                };

                return CorporationReview.bulkCreate([corpReview]);
            }),
        );

        return;
    },

    async down(queryInterface, Sequelize) {
        await queryInterface.bulkDelete("CorporationReview", null, {});
        await queryInterface.bulkDelete("StudentReview", null, {});
        /**
         * Add commands to revert seed here.
         *
         * Example:
         * await queryInterface.bulkDelete('People', null, {});
         */
    },
};
